variable:
  session: ${createSession()}
hook:
  beforeAll:
    - bind:
        # `CartRedis` is a plugin at /example/util/cartRedis
        cartRedis: ${await CartRedis.connect()}
  afterAll:
    - await cartRedis.quit()
  afterEach:
    - await cartRedis.resetUser(session.userId)
scenarios:
  - name: Example with custom plugins (change Redis' data before calling API in `arrange`)
    variable:
      productId: OLJCESPC7Z
      quantity: 4
    steps:
      - description: Set cart data with custom plugin before calling API
        arrange:
          - await cartRedis.store(session.userId, productId, quantity)
          - runner: fetch
            argument:
              endpoint: products/${productId}
            bind:
              productName: ${_.jsonBody.name}
          - bind:
              respondedProductId: ${_arranges[-1].jsonBody.id}
        act:
          runner: fetch
          argument:
            endpoint: cart?sessionId=${session.userId}&currencyCode=${session.currencyCode}
        assert:
          # `assertStatus` is a plugin at echoed/scenario/gen/jest/asserter
          - assertStatus:
              - ${_.response}
              - 200
          # `assertItemLength` is a plugin at /example/util/assertItemLength.ts
          - assertItemLength:
              - ${_.jsonBody.items}
              - 1
          - expect(_.jsonBody.items[0].productId).toBe(productId)
          - expect(_.jsonBody.items[0].productId).toBe(respondedProductId)
          - expect(_.jsonBody.items[0].quantity).toBe(quantity)
          - expect(_.jsonBody.items[0].product.name).toBe(productName)
