const DEFAULT_PLUGIN_CONFIG_OPTIONS: Cypress.PluginConfigOptions = {
  socketIoCookie: "",
  animationDistanceThreshold: 0,
  arch: "",
  baseUrl: null,
  blockHosts: null,
  browsers: [],
  chromeWebSecurity: false,
  clientCertificates: [],
  component: {
    devServer: () => ({
      port: 111,
      close: (): void => {},
    }),
  },
  configFile: "",
  cypressBinaryRoot: "",
  defaultCommandTimeout: 0,
  devServerPublicPathRoute: "",
  downloadsFolder: "",
  e2e: {},
  excludeSpecPattern: "*.hot-update.js",
  execTimeout: 0,
  experimentalCspAllowList: false,
  experimentalFetchPolyfill: false,
  experimentalInteractiveRunEvents: false,
  experimentalMemoryManagement: false,
  experimentalModifyObstructiveThirdPartyCode: false,
  experimentalSkipDomainInjection: null,
  experimentalSourceRewriting: false,
  experimentalStudio: false,
  experimentalWebKitSupport: false,
  fileServerFolder: "",
  fixturesFolder: false,
  hosts: null,
  includeShadowDom: false,
  indexHtmlFile: "",
  isInteractive: false,
  modifyObstructiveCode: false,
  namespace: "",
  numTestsKeptInMemory: 0,
  pageLoadTimeout: 0,
  platform: "linux",
  port: null,
  projectId: null,
  projectRoot: "",
  redirectionLimit: 0,
  remote: {
    domainName: "",
    strategy: "file",
    origin: "",
    fileServer: null,
    props: {},
    visiting: "",
  },
  repoRoot: null,
  reporter: "",
  reporterOptions: {},
  requestTimeout: 0,
  resolvedNodePath: "",
  resolvedNodeVersion: "",
  responseTimeout: 0,
  retries: null,
  screenshotOnRunFailure: false,
  screenshotsFolder: false,
  scrollBehavior: false,
  setupNodeEvents: (): void => {},
  slowTestThreshold: 0,
  specPattern: [],
  supportFile: false,
  supportFolder: "",
  taskTimeout: 0,
  testIsolation: false,
  testingType: "e2e",
  trashAssetsBeforeRuns: false,
  userAgent: null,
  version: "",
  video: false,
  videoCompression: false,
  videosFolder: "",
  viewportHeight: 0,
  viewportWidth: 0,
  waitForAnimations: false,
  watchForFileChanges: false,
  env: {},
};

export function buildCypressPluginConfigOptions(
  overrides: Partial<Cypress.PluginConfigOptions> = {},
): Cypress.PluginConfigOptions {
  return {
    ...DEFAULT_PLUGIN_CONFIG_OPTIONS,
    ...overrides,
  };
}
