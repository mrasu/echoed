// Code generated by Echoed. DO NOT EDIT.
<% /*
  Note for developers:

  * Name of variables
    Names starting with "_" (one underscore) are variables for user to access test context. need backward compatibility.
    Names starting with "__" (two underscore) are variables for internal. no need to be backward compatible.
    Names not starting with "_" are variables defined by user. MUST not define in this template.

  * Order of execution
    1. import
    2. setup environment variables, _env (env cannot use variables. must use constant value)
    3. define variables
    4. setup options
    5. register hooks
    6. run (arrange -> act -> assert)
    7. bind variables to use in later
*/ %>

import * as __gen from "echoed/scenario/gen/internal/jest"
<% it.config.plugin.runners.forEach(function(runner) { %>
  import { <%= runner.name %> } from "<%= runner.module %>"
<% }) %>
<% it.config.plugin.asserters.forEach(function(asserter) { %>
  import { <%= asserter.name %> } from "<%= asserter.module %>"
<% }) %>
<% it.config.plugin.commons.forEach(function(comm) { %>
  import <%= comm.importClause %> from "<%= comm.module %>"
<% }) %>

const _env = __gen.buildEnv({
  <% Array.from(it.config.env.map.entries()).forEach(function([key, value]) { %>
    <% if (value) { %>
      "<%= key %>": "<%= value %>",
    <% } else { %>
      "<%= key %>": null,
    <% } %>
  <% }) %>
});

<% Array.from(it.scenarioBook.variable.entries()).forEach(function([key, value]) { %>
  const <%=key%> = <%= value.toTsLine() %>;
<% }) %>

const __configRunnerOption = {
  <% it.config.plugin.getUsedRunners(it.scenarioBook).forEach(function(runner) { %>
    <%= runner.name %>: {
      <% Array.from(runner.option.entries()).forEach(function([key, value]) {%>
        "<%= key %>": <%= value.toTsLine() %>,
      <% })%>
    },
  <% }) %>
};
const __runnerOption = {
  ...__configRunnerOption,
  <% it.scenarioBook.runnerOptions.forEach(function(runnerOption) { %>
    <%= runnerOption.name %>: {
      <% Array.from(runnerOption.option.entries()).forEach(function([key, value]) {%>
        "<%= key %>": <%= value.toTsLine() %>,
      <% })%>
    }
  <% }) %>
}

const __asserterOption = {
  <% it.config.plugin.getUsedAsserters(it.scenarioBook).forEach(function(asserter) { %>
    <%= asserter.name %>: {
      <% Array.from(asserter.option.entries()).forEach(function([key, value]) {%>
        "<%= key %>": <%= value.toTsLine() %>,
      <% })%>
    },
  <% }) %>
}

let __hookBindVariables: Record<string, Record<string, any>> = {
  beforeAll: {},
  afterAll: {},
  beforeEach: {},
  afterEach: {},
};

<% if (it.scenarioBook.hook.beforeAll) { %>
  <%~ include("hook", {hookType: "beforeAll", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.afterAll) { %>
  <%~ include("hook", {hookType: "afterAll", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.beforeEach) { %>
  <%~ include("hook", {hookType: "beforeEach", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.afterEach) { %>
  <%~ include("hook", {hookType: "afterEach", hook: it.scenarioBook.hook}) %>
<% } %>

<% let retryCount = it.scenarioBook.getRetryCount(it.config) %>
<% if (retryCount > 0) {%>
  jest.retryTimes(<%= retryCount %>, {logErrorsBeforeRetry: true})
<% } %>

<% it.scenarioBook.scenarios.forEach(function(scenario) { %>
  test<%=scenario.skip ? ".skip": ""%>(`<%= scenario.escapedName %>`, async () => {
    const __hookBindVariablesForStep = {...__hookBindVariables["beforeAll"], ...__hookBindVariables["beforeEach"]};
    const {
      <% Array.from(it.scenarioBook.hook.getBoundVariablesBefore("afterEach", 0)).forEach(function(varName) { %>
         <%=varName %>,
      <% }) %>
    } = __hookBindVariablesForStep;

    const __ctx = new __gen.ScenarioContext(`<%= scenario.escapedName %>`);

    <% Array.from(scenario.variable.entries()).forEach(function([key, value]) { %>
      const <%=key%> = <%= value.toTsLine() %>;
    <% }) %>

    const __bindVariables: Record<string, any> = {}
    <% scenario.steps.forEach(function(step, stepIndex) { %>
      {
        /* <%= step.description %> */

        let [_, _steps]: any = __ctx.stepNext();

        const {
        <% scenario.getBoundVariablesBefore(stepIndex).forEach(function(varName) { %>
           <%=varName %>,
        <% }) %>
        } = __bindVariables;

        <% Array.from(step.variable.entries()).forEach(function([key, value]) { %>
          const <%=key%> = <%= value.toTsLine() %>;
        <% }) %>

        <% if(step.arranges.length > 0) { %>
          let __arrangeBindVariables: Record<string, any> = {};

          {
            let [_, _arranges, __arrangeCtx]: any = __gen.ArrangeContext.start(__ctx);

            <% step.arranges.forEach(function(arrange, arrangeIndex) { %>
              __arrangeBindVariables = await __gen.wrapArrange(__arrangeBindVariables, async () => {
                // Arrange (<%=arrangeIndex%>)

                [_, _arranges] = __arrangeCtx.next();
                const {
                  <% step.getArrangeBoundVariablesBefore(arrangeIndex).forEach(function(varName) { %>
                     <%=varName %>,
                  <% }) %>
                } = __arrangeBindVariables;

                <% if (arrange.rawString) {%>
                  <%= arrange.rawString.toTsLine() %>;
                  return {}
                <% } else if (arrange.runner) { %>
                  const __runnerArgument = <%= arrange.runner.argument ? arrange.runner.argument.toTsLine(): undefined %>;
                  const __arrangeOption = {
                    <% Array.from(arrange.runner.option.entries()).forEach(function([key, value]) {%>
                      "<%= key %>": <%= value.toTsLine() %>,
                    <% })%>
                  };

                  const __arrangeResult = await <%= arrange.runner.name %>(
                    __arrangeCtx.context,
                    __runnerArgument,
                    {...__runnerOption["<%= arrange.runner.name %>"], ...__arrangeOption}
                  );

                  [_, _arranges] = __arrangeCtx.setResult(__arrangeResult);

                  return {
                    <% Array.from(arrange.runner.bind.entries()).forEach(function([key, value]) { %>
                      "<%= key %>": <%= value.toTsLine() %>,
                    <% }) %>
                  };
                <% } else { %>
                  return {
                    <% Array.from(arrange.bind.entries()).forEach(function([key, value]) { %>
                      "<%= key %>": <%= value.toTsLine() %>,
                    <% }) %>
                  };
                <% } %>
              })

            <% }) %>
          }

          const {
            <% step.getArrangeBoundVariables().forEach(function(varName) { %>
               <%=varName %>,
            <% }) %>
          } = __arrangeBindVariables;
        <% } %>

        <% if(step.act) { %>
          const __runnerArgument = <%= step.act.runner.argument ? step.act.runner.argument.toTsLine(): undefined %>;
          const __actOption = {
            <% Array.from(step.act.runner.option.entries()).forEach(function([key, value]) {%>
              "<%= key %>": <%= value.toTsLine() %>,
            <% })%>
          };

          const __actResult = await <%= step.act.runner.name %>(
            __ctx.actContext,
            __runnerArgument,
            {...__runnerOption["<%= step.act.runner.name %>"], ...__actOption}
          );

          [_, _steps] = __ctx.setActResult(__actResult);
        <% } %>

        <% step.asserts.forEach(function(assert) { %>
          <% if (assert.rawString) {%>
            <%= assert.rawString.toTsLine() %>;
          <% } else { %>
            <% let asserter = assert.asserter %>
            await <%= asserter.name %>(
              __ctx.assertContext,
              <%= asserter.x.toTsLine() %>,
              <%= asserter.y.toTsLine() %>,
              __asserterOption["<%= asserter.name %>"]
            );
          <% } %>
        <% }) %>

        <% Array.from(step.bind.entries()).forEach(function([key, value]) { %>
          __bindVariables["<%= key %>"] = <%= value.toTsLine() %>;
        <% }) %>
      }

    <% }) %>
  })

<% })  %>
