// Code generated by Echoed. DO NOT EDIT.
<% /*
  Note for developers:

  * Name of variables
    Names starting with "_" (one underscore) are variables for user to access test context. need backward compatibility.
    Names starting with "__" (two underscore) are variables for internal. no need to be backward compatible.
    Names not starting with "_" are variables defined by user. MUST not define in this template.

  * Order of execution
    1. import
    2. setup environment variables, _env (env cannot use variables. must use constant value)
    3. define variables
    4. setup options
    5. register hooks
    6. run (arrange -> act -> assert)
    7. bind variables to use in later
*/ %>

import * as __gen from "echoed/scenario/gen/internal/jest"
<% it.config.plugin.runners.forEach(function(runner) { %>
  import { <%= runner.name %> } from "<%= runner.module %>"
<% }) %>
<% it.config.plugin.asserters.forEach(function(asserter) { %>
  import { <%= asserter.name %> } from "<%= asserter.module %>"
<% }) %>
<% it.config.plugin.commons.forEach(function(comm) { %>
  import <%= comm.importClause %> from "<%= comm.module %>"
<% }) %>

const _env = __gen.buildEnv({
  <% Array.from(it.config.env.map.entries()).forEach(function([key, value]) { %>
    <% if (value) { %>
      "<%= key %>": "<%= value %>",
    <% } else { %>
      "<%= key %>": null,
    <% } %>
  <% }) %>
});

<% Array.from(it.scenarioBook.variable.entries()).forEach(function([key, value]) { %>
  const <%=key%> = <%= value.toTsLine() %>;
<% }) %>

const __scenarioBookCtx = new __gen.ScenarioBookContext();

<%~ include("../common/plugin", {config: it.config, scenarioBook: it.scenarioBook}) %>

<% if (it.scenarioBook.hook.beforeAll) { %>
  <%~ include("hook", {hookType: "beforeAll", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.afterAll) { %>
  <%~ include("hook", {hookType: "afterAll", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.beforeEach) { %>
  <%~ include("hook", {hookType: "beforeEach", hook: it.scenarioBook.hook}) %>
<% } %>

<% if (it.scenarioBook.hook.afterEach) { %>
  <%~ include("hook", {hookType: "afterEach", hook: it.scenarioBook.hook}) %>
<% } %>

<% let retryCount = it.scenarioBook.getRetryCount(it.config) %>
<% if (retryCount > 0) {%>
  jest.retryTimes(<%= retryCount %>, {logErrorsBeforeRetry: true})
<% } %>

<% it.scenarioBook.scenarios.forEach(function(scenario) { %>
  test<%=scenario.skip ? ".skip": ""%>(`<%= scenario.escapedName %>`, async () => {
    const __scenarioCtx = __scenarioBookCtx.newScenarioContext(`<%= scenario.escapedName %>`);

    <%~ include("scenario", {scenarioBook: it.scenarioBook, scenario: scenario})%>
  })

<% })  %>
